generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id @default(cuid()) @map("_id")
  name           String
  email          String               @unique
  password       String
  role           UserRole             @default(STUDENT)
  class          Class?               @relation(fields: [classId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  classId        String?
  taughtClasses  Class[]              @relation("ClassTeacher")
  notifications  Notification[]
  assignments    Assignment[]
  votedPolls     VotedPoll[]
  createdPolls   Poll[]
  solutions      Solution[]
  chats          Chat[]               @relation(fields: [chatIds], references: [id])
  chatIds        String[]
  messages       Message[]
  wrongAnswers   WrongAnswer[]
  quizAttempts   StudentQuizAttempt[]
  createdQuizzes Quiz[]
  roadmaps       Roadmap[]
  streak         Json? // Streak data including currentStreak, longestStreak, lastActiveDate, and activityLog
}

model Class {
  id            String         @id @default(cuid()) @map("_id")
  name          String         @unique
  classNumber   String         @unique
  students      User[]
  teacher       User?          @relation("ClassTeacher", fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacherId     String?
  courses       Course[]
  announcements Announcement[]
}

model Course {
  id                      String         @id @default(cuid()) @map("_id")
  name                    String
  classId                 String
  class                   Class          @relation(fields: [classId], references: [id])
  assignments             Assignment[]
  notifications           Notification[]
  materials               Material[]
  quizzes                 Quiz[]
  googleClassroomId       String         @unique
  professorName           String?
  professorProfilePicture String?
}

model Assignment {
  id            String     @id @default(cuid()) @map("_id")
  googleId      String?    @unique
  title         String
  description   String?
  dueDate       DateTime?
  courseId      String
  course        Course     @relation(fields: [courseId], references: [id])
  solutions     Solution[]
  User          User?      @relation(fields: [userId], references: [id])
  userId        String?
  lastUpdated   DateTime   @default(now())
  materials     Json?
  alternateLink String?
  type          String?
  thumbnail     String?    @default("https://res.cloudinary.com/dkysrpdi6/image/upload/v1723574586/image_lpepb4.png")
}

model Solution {
  id           String     @id @default(cuid()) @map("_id")
  documentUrl  String
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
}

model Announcement {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  content     String
  classId     String
  class       Class    @relation(fields: [classId], references: [id])
  createdAt   DateTime @default(now())
  isImportant Boolean  @default(false)
}

model Notification {
  id        String   @id @default(cuid()) @map("_id")
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Material {
  id       String @id @default(cuid()) @map("_id")
  name     String
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
  document String
  category String
}

model Chat {
  id              String    @id @default(cuid()) @map("_id")
  name            String
  picture         String
  users           User[]    @relation(fields: [userIds], references: [id])
  userIds         String[]
  messages        Message[]
  latestMessageId String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid()) @map("_id")
  content   String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  files     Json? // This will store the array of file objects
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Poll {
  id         String      @id @default(cuid()) @map("_id")
  question   String
  options    String[]
  votes      PollVote[]
  votedPolls VotedPoll[]
  createdBy  User        @relation(fields: [userId], references: [id])
  userId     String
  messageId  String?     @unique
  createdAt  DateTime    @default(now())
}

model PollVote {
  id     String @id @default(cuid()) @map("_id")
  pollId String
  option String
  poll   Poll   @relation(fields: [pollId], references: [id])
}

model VotedPoll {
  id     String @id @default(cuid()) @map("_id")
  userId String
  pollId String
  user   User   @relation(fields: [userId], references: [id])
  poll   Poll   @relation(fields: [pollId], references: [id])
}

model WrongAnswer {
  id            String   @id @default(cuid()) @map("_id")
  question      String
  userAnswer    String
  correctAnswer String
  materialName  String
  courseName    String?
  courseId      String?
  timestamp     DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}

model Quiz {
  id              String               @id @default(cuid()) @map("_id")
  title           String
  description     String?
  courseId        String
  course          Course               @relation(fields: [courseId], references: [id])
  createdBy       String
  creator         User                 @relation(fields: [createdBy], references: [id])
  questions       QuizQuestion[]
  status          QuizStatus           @default(DRAFT)
  startTime       DateTime?
  endTime         DateTime?
  duration        Int?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  isAiGenerated   Boolean              @default(false)
  studentAttempts StudentQuizAttempt[]
}

model QuizQuestion {
  id             String                  @id @default(cuid()) @map("_id")
  quizId         String
  quiz           Quiz                    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question       String
  options        String[]
  correctAnswer  Int
  order          Int                     @default(0)
  points         Int                     @default(1)
  studentAnswers StudentQuestionAnswer[]
}

model StudentQuizAttempt {
  id          String                  @id @default(cuid()) @map("_id")
  quizId      String
  quiz        Quiz                    @relation(fields: [quizId], references: [id])
  userId      String
  user        User                    @relation(fields: [userId], references: [id])
  startedAt   DateTime                @default(now())
  completedAt DateTime?
  score       Int                     @default(0)
  answers     StudentQuestionAnswer[]
  status      AttemptStatus           @default(IN_PROGRESS)
}

model StudentQuestionAnswer {
  id               String             @id @default(cuid()) @map("_id")
  questionId       String
  question         QuizQuestion       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  studentAttemptId String
  studentAttempt   StudentQuizAttempt @relation(fields: [studentAttemptId], references: [id], onDelete: Cascade)
  selectedOption   Int?
  isCorrect        Boolean?
  answeredAt       DateTime           @default(now())
}

model Roadmap {
  id          String         @id @default(cuid()) @map("_id")
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  title       String
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  topics      RoadmapTopic[]
  isArchived  Boolean        @default(false)
}

model RoadmapTopic {
  id          String      @id @default(cuid()) @map("_id")
  roadmapId   String
  roadmap     Roadmap     @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  title       String
  description String?
  targetDate  DateTime
  status      TopicStatus @default(NOT_STARTED)
  resources   Json? // Array of resources (videos, articles, books, etc.)
  priority    Int         @default(1)
  order       Int         @default(0)
}

enum UserRole {
  STUDENT
  ADMIN
  TEACHER
  CLASS_TEACHER
}

enum QuizStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  TIMED_OUT
}

enum TopicStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
